syntax = "proto3";

package ibc.lightclients.grandpa.v1;

option go_package = "github.com/cosmos/ibc-go/modules/light-clients/10-grandpa/types";

import "ibc/core/client/v1/client.proto";
import "ibc/core/commitment/v1/commitment.proto";
import "gogoproto/gogo.proto";

// Client state
// The GRANDPA client state tracks latest height and a possible frozen height.
// interface ClientState {
//   latestHeight: uint64
//   frozenHeight: Maybe<uint64>
// }
message ClientState {
  option (gogoproto.goproto_getters) = false;

  string chain_id = 1;
  // Latest height the client was updated to
  ibc.core.client.v1.Height latest_height = 2
      [(gogoproto.nullable) = false, (gogoproto.moretags) = "yaml:\"latest_height\""];
  // Block height when the client was frozen due to a misbehaviour
  ibc.core.client.v1.Height frozen_height = 3
      [(gogoproto.nullable) = false, (gogoproto.moretags) = "yaml:\"frozen_height\""];
}

// Consensus state
// The GRANDPA client tracks authority set and commitment root for all previously verified consensus states.
// interface ConsensusState {
//   authoritySet: AuthoritySet
//   commitmentRoot: []byte
// }
message ConsensusState {
  option (gogoproto.goproto_getters) = false;

  // commitment root (i.e app hash)
  ibc.core.commitment.v1.MerkleRoot root = 1 [(gogoproto.nullable) = false];
  // authoritySet
  // AuthoritySet authority_set = 2 [(gogoproto.nullable) = false];
}
// Misbehaviour
// The Misbehaviour type is used for detecting misbehaviour and freezing the client - to prevent further packet flow -
// if applicable. GRANDPA client Misbehaviour consists of two headers at the same height both of which the light client
// would have considered valid. interface Misbehaviour {
//   fromHeight: uint64
//   h1: Header
//   h2: Header
// }
// message Misbehaviour {
//   option (gogoproto.goproto_getters) = false;

//   ibc.core.client.v1.Height from_height = 1 [(gogoproto.nullable) = false, (gogoproto.moretags) = "yaml:\"frome_height\""];
//   Header header_1 = 2 [(gogoproto.customname) = "Header1", (gogoproto.moretags) = "yaml:\"header_1\""];
//   Header header_2 = 3 [(gogoproto.customname) = "Header2", (gogoproto.moretags) = "yaml:\"header_2\""];
// }
message Misbehaviour {
  option (gogoproto.goproto_getters) = false;

  string client_id = 1 [(gogoproto.moretags) = "yaml:\"client_id\""];
  Header header_1  = 2 [(gogoproto.customname) = "Header1", (gogoproto.moretags) = "yaml:\"header_1\""];
  Header header_2  = 3 [(gogoproto.customname) = "Header2", (gogoproto.moretags) = "yaml:\"header_2\""];
}

// Headers
// The GRANDPA client headers include the height, the commitment root,a justification of block and authority set.
// (In fact, here is a proof of authority set rather than the authority set itself, but we can using a fixed key
// to verify the proof and extract the real set, the details are ignored here)
// interface Header {
//   height: uint64
//   commitmentRoot: []byte
//   justification: Justification
//   authoritySet: AuthoritySet
// }
message Header {
  option (gogoproto.goproto_getters) = false;
  ibc.core.client.v1.Height height = 1 [(gogoproto.nullable) = false, (gogoproto.moretags) = "yaml:\"height\""];
  
  // ibc.core.commitment.v1.MerkleRoot root  = 2 [(gogoproto.nullable) = false];
  // Justification justification = 3 [(gogoproto.nullable) = false];
  // AuthoritySet authority_set = 4 [(gogoproto.nullable) = false];
}

// Justification
// A GRANDPA justification for block finality, it includes a commit message and an ancestry proof including
// all headers routing all precommit target blocks to the commit target block. For example, the latest blocks
// are A - B - C - D - E - F, where A is the last finalised block, F is the point where a majority for vote
//(they may on B, C, D, E, F) can be collected. Then the proof need to include all headers from F back to A.

// interface Justification {
//   round: uint64
//   commit: Commit
//   votesAncestries: []Header
// }
message Justification {
  option (gogoproto.goproto_getters) = false;

  uint64          round          = 1 [(gogoproto.moretags) = "yaml:\"round\""];
  bytes           commit         = 2 [(gogoproto.moretags) = "yaml:\"commit\""];
  repeated Header votes_ancestry = 3 [(gogoproto.moretags) = "yaml:\"vote_ancestry\""];
}

// Authority set
// A set of authorities for GRANDPA.
// interface AuthoritySet {
//   // this is incremented every time the set changes
//   setId: uint64
//   authorities: List<Pair<AuthorityId, AuthorityWeight>>
// }
message AuthoritySet {
  option (gogoproto.goproto_getters) = false;

  uint64             set_id    = 1 [(gogoproto.moretags) = "yaml:\"set_id\""];
  repeated Authority authority = 2 [(gogoproto.moretags) = "yaml:\"authority\""];
}
// Authority
message Authority {
  option (gogoproto.goproto_getters) = false;

  bytes authority_id     = 1 [(gogoproto.moretags) = "yaml:\"authority_id\""];
  bytes authority_weight = 2 [(gogoproto.moretags) = "yaml:\"authority_weight\""];
}

// Commit
// A commit message which is an aggregate of signed precommits.
// interface Commit {
//   precommits: []SignedPrecommit
// }
// interface SignedPrecommit {
//   targetHash: Hash
//   signature: Signature
//   id: AuthorityId
// }
message Commit {
  option (gogoproto.goproto_getters) = false;

  repeated SignedPrecommit precommit = 1 [(gogoproto.moretags) = "yaml:\"precommit\""];
}
// SignedPrecommit
message SignedPrecommit {
  option (gogoproto.goproto_getters) = false;

  bytes authority_id = 1 [(gogoproto.moretags) = "yaml:\"authority_id\""];
  bytes target_hash  = 2 [(gogoproto.moretags) = "yaml:\"target_hash\""];
  bytes signature    = 3 [(gogoproto.moretags) = "yaml:\"signature\""];
}