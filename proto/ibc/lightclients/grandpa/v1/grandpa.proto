syntax = "proto3";

package ibc.lightclients.grandpa.v1;

option go_package = "github.com/cosmos/ibc-go/modules/light-clients/10-grandpa/types";

import "ibc/core/client/v1/client.proto";
import "ibc/core/commitment/v1/commitment.proto";
import "gogoproto/gogo.proto";



// Client state
message ClientState {
  option (gogoproto.goproto_getters) = false;

  string chain_id = 1;
  // Latest height the client was updated to
  uint64 latest_height = 2
      [(gogoproto.nullable) = false, (gogoproto.moretags) = "yaml:\"latest_height\""];
  // Block height when the client was frozen due to a misbehaviour
  uint64 frozen_height = 3
      [(gogoproto.nullable) = false, (gogoproto.moretags) = "yaml:\"frozen_height\""];
 
  uint64 validator_set_id = 4;
  /// Number of validators in the set.
  /// Some BEEFY Light Clients may use an interactive protocol to verify only subset
  /// of signatures. We put set length here, so that these clients can verify the minimal
  /// number of required signatures.
  uint32 validator_set_len = 5;
  /// Merkle Root Hash build from BEEFY AuthorityIds.
  /// This is used by Light Clients to confirm that the commitments are signed by the correct
  /// validator set. Light Clients using interactive protocol, might verify only subset of
  /// signatures, hence don't require the full list here (will receive inclusion proofs).
  bytes validator_set_root = 6;

  // latest_commitment: Option<Commitment>,
    // block_number is height?
  uint64 block_number = 7
        [(gogoproto.nullable) = false, (gogoproto.moretags) = "yaml:\"block_number\""];
    //validator_set_id
  uint32 block_validator_set_id = 8;
  // mmr root
  bytes block_mmr_root = 9;

}

// Consensus state
message ConsensusState {
  option (gogoproto.goproto_getters) = false;
   // mmr root
   bytes root = 1;
   // block_number is height?
   uint64 block_number = 2
    [(gogoproto.nullable) = false, (gogoproto.moretags) = "yaml:\"block_number\""];
   //validator_set_id
   uint32 validator_set_id = 3;

 }
 
 message Header {
  option (gogoproto.goproto_getters) = false;
  /// The parent hash.
  bytes parent_hash = 1 [(gogoproto.nullable) = false];
  /// The block number.
  uint32 block_number = 2 [(gogoproto.nullable) = false];
  /// The state trie merkle root
  bytes state_root = 3 [(gogoproto.nullable) = false];
  /// The merkle root of the extrinsics.
	bytes extrinsics_root = 4 [(gogoproto.nullable) = false];
  /// A chain-specific digest of data useful for light clients or referencing auxiliary data.
  bytes digest = 5 [(gogoproto.nullable) = false];
}

// Misbehaviour
// The Misbehaviour type is used for detecting misbehaviour and freezing the client - to prevent further packet flow -
// if applicable. GRANDPA client Misbehaviour consists of two headers at the same height both of which the light client
message Misbehaviour {
  option (gogoproto.goproto_getters) = false;

  uint64 client_id = 1 [(gogoproto.moretags) = "yaml:\"client_id\""];
  Header header_1  = 2 [(gogoproto.customname) = "Header1", (gogoproto.moretags) = "yaml:\"header_1\""];
  Header header_2  = 3 [(gogoproto.customname) = "Header2", (gogoproto.moretags) = "yaml:\"header_2\""];
}

